diff -Naur sriov-network-device-plugin/cmd/sriovdp/manager.go sriov-fec-plugin/cmd/sriovdp/manager.go
--- sriov-network-device-plugin/cmd/sriovdp/manager.go	2019-10-23 20:38:01.645086012 +0100
+++ sriov-fec-plugin/cmd/sriovdp/manager.go	2019-10-23 20:37:45.526086759 +0100
@@ -32,6 +32,7 @@
 const (
 	socketSuffix = "sock"
 	netClass     = 0x02 // Device class - Network controller.	 ref: https://pci-ids.ucw.cz/read/PD/02 (for Sub-Classes)
+	fecClass     = 0x12 // Device class - Processing accelerator
 )
 
 /*
@@ -46,6 +47,7 @@
 		07	Infiniband controller
 		08	Fabric controller
 		80	Network controller
+		12  Processing Accelerator
 */
 
 type cliParams struct {
@@ -194,8 +196,8 @@
 			continue
 		}
 
-		// only interested in network class
-		if devClass == netClass {
+		// only interested in network class + patch for detecting FEC processing accelerator
+		if devClass == netClass || devClass == fecClass {
 			vendor := device.Vendor
 			vendorName := vendor.Name
 			if len(vendor.Name) > 20 {
@@ -208,28 +210,57 @@
 			}
 			glog.Infof("discoverDevices(): device found: %-12s\t%-12s\t%-20s\t%-40s", device.Address, device.Class.ID, vendorName, productName)
 
-			// exclude device in-use in host
-			if isDefaultRoute, _ := hasDefaultRoute(device.Address); !isDefaultRoute {
+			// Network devices
+			if devClass == netClass {
+				// exclude device in-use in host
+				if isDefaultRoute, _ := hasDefaultRoute(device.Address); !isDefaultRoute {
+
+					aPF := utils.IsSriovPF(device.Address)
+					aVF := utils.IsSriovVF(device.Address)
+
+					if aPF || !aVF {
+						// add to linkWatchList
+						rm.addToLinkWatchList(device.Address)
+					}
+
+					if aPF && utils.SriovConfigured(device.Address) {
+						// do not add this device in net device list
+						continue
+					}
+
+					if newDevice, err := resources.NewPciNetDevice(device, rm.rFactory); err == nil {
+						rm.netDeviceList = append(rm.netDeviceList, newDevice)
+					} else {
+						glog.Errorf("discoverDevices() error adding new device: %q", err)
+					}
 
-				aPF := utils.IsSriovPF(device.Address)
-				aVF := utils.IsSriovVF(device.Address)
-
-				if aPF || !aVF {
-					// add to linkWatchList
-					rm.addToLinkWatchList(device.Address)
 				}
+			}
 
-				if aPF && utils.SriovConfigured(device.Address) {
-					// do not add this device in net device list
-					continue
-				}
+			// FEC processing accelerators
+			if devClass == fecClass {
+				//Check if device is a physical function (PF)
+				aPF := utils.IsSriovPF(device.Address)
 
-				if newDevice, err := resources.NewPciNetDevice(device, rm.rFactory); err == nil {
-					rm.netDeviceList = append(rm.netDeviceList, newDevice)
+				//If dev ID = 0b30 it means it is a RSU device and not FEC
+				if device.Product.ID != "0b30" {
+					if aPF && utils.SriovConfigured(device.Address) {
+						// If it is a PF and SRIOV is configured do not add to device list
+						continue
+					}
+
+					if newDevice, err := resources.NewPciNetDevice(device, rm.rFactory); err == nil {
+						if newDevice.GetDriver() == "igb_uio" || newDevice.GetDriver() == "vfio-pci" {
+							rm.netDeviceList = append(rm.netDeviceList, newDevice)
+						} else {
+							glog.Infof("Excluding FEC device %-12s because it is not bound to userspace driver.", device.Address)
+						}
+					} else {
+						glog.Errorf("discoverDevices() error adding new device: %q", err)
+					}
 				} else {
-					glog.Errorf("discoverDevices() error adding new device: %q", err)
+					glog.Infof("Excluding device %-12s , it is a RSU device.", device.Address)
 				}
-
 			}
 		}
 	}
